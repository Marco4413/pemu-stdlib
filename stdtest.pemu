
;;
 ; @File
 ; @Author: [hds536jhmk](https://github.com/hds536jhmk)
 ; @Name: stdtest.pemu
 ; @Description: A PEMU program that makes sure that all standard libraries compile and work as intended.
 ; @License: MIT
 ; @Created-At   : 19-07-2021
 ; @Last-Modified: 26-09-2021

;;
 ; @Processor-Requirements
 ; @Min-Bits  : 16
 ; @Min-Memory: 768
 ; @Min-Clock : 1M

CALL f_main

#INCLUDE "all.pemulib"

; This is shown when testing the sleep function
waiting: #DW [1] #DS "Waiting 2 seconds..." #DW @STDLIB_NULL
wait_time: #DW 2000

; These are used to test the input functions
input_number_label: #DW [1] #DS "Number Input: " #DW @STDLIB_NULL
input_number: #DW 0

@INPUT_STRING_LENGTH 32
input_string_label: #DW [1] #DS "String Input: " #DW @STDLIB_NULL
input_string: #DA { [2] @INPUT_STRING_LENGTH } #DA [@INPUT_STRING_LENGTH] #DW @STDLIB_NULL

processor_bit_count_label: #DW [1] #DS "Processor's Bit Count: " #DW @STDLIB_NULL
processor_bit_count: #DW 0

; This is a string which is going to be animated
animated_string_interval: #DW 500
animated_string_frames: #DW 10
animated_string:
    #DA { [2] animated_string_length: 0 }
    #DS "Loading..." #DW @STDLIB_NULL

f_main:
    ; Testing the Function to get Processor's Bit Count
    CALL f_pbitfinder
    POP processor_bit_count

    ; Testing String Length Function
    PUSH animated_string
    CALL f_strlen
    POP animated_string_length

    ; Testing Sleep Function
    PUSH waiting
    CALL f_print
    PUSH wait_time
    CALL f_sleep

    ; Testing Number Input Function
    PUSH input_number_label
    CALL f_get_number
    POP input_number

    ; Testing String Input Function
    PUSH input_string_label ; Label
    PUSH input_string       ; Buffer Pointer
    PUSH input_string[1]    ; Buffer Size
    CALL f_get_string

    ; Testing Timer Function
    PUSH f_animate_string_ptr
    PUSH animated_string_interval
    PUSH animated_string_frames
    CALL f_timer

    ; Outputting the Bit Count of the Processor
    OUTC stdlib_null
    PUSH processor_bit_count_label
    CALL f_print
    OUTI processor_bit_count

    ; Outputting a Random Number
    OUTC stdlib_newline
    ; The Cool thing about calling init here...
    ; Is that the seed is pretty random because of the user input above,
    ;  so it depende on the speed of who's running the program
    CALL f_init_rng_seed
    CALL f_lcg_rng
    POP stdlib_temp
    OUTI stdlib_temp

    ; Testing Output of Input Functions
    OUTC stdlib_newline
    PUSH input_string
    CALL f_print

    OUTC stdlib_newline
    OUTI input_number
    RET


_animate_string_anim_chars: #DW 4   ; This is actually the number of characters to delete + 1
_animate_string_frame:      #DW 0   ; The current animation frame
f_animate_string_ptr:       #DW [1] ; The pointer to this function
f_animate_string:
    ; Calculating the length of animated_string
    MOV stdlib_temp _animate_string_frame
    MOD stdlib_temp _animate_string_anim_chars

    ADD stdlib_temp animated_string_length
    INC stdlib_temp
    
    SUB stdlib_temp _animate_string_anim_chars

    ; Printing animated_string
    OUTC stdlib_null
    PUSH animated_string
    PUSH stdlib_temp
    CALL f_printl

    ; Adding this frame to the total count
    INC _animate_string_frame
    RET
